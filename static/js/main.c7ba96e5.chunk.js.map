{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","App.js","utils.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","App","useState","undefined","web3","setWeb3","accounts","setAccounts","contract","setContract","admin","setAdmin","ballots","setBallots","useEffect","a","Promise","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","Contract","abi","address","methods","call","init","on","isReady","updateBallots","parseInt","nextBallotId","i","all","getBallot","votes","ballot","hasVoted","push","preventDefault","name","target","elements","value","choices","split","duration","createBallot","send","from","voters","addVoters","ballotId","select","choiceId","options","selectedIndex","vote","toLowerCase","className","onSubmit","type","map","key","choice","now","Date","getTime","end","isFinished","toLocaleString","ReactDOM","render","document","getElementById"],"mappings":"qgBAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,qKCwMVC,MA5Mf,WAAgB,IAAD,EACWC,wBAASC,GADpB,mBACNC,EADM,KACAC,EADA,OAEmBH,wBAASC,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBL,wBAASC,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIaP,wBAASC,GAJtB,mBAINO,EAJM,KAICC,EAJD,OAKiBT,mBAAS,IAL1B,mBAKNU,EALM,KAKGC,EALH,KAObC,qBAAU,YACE,uCAAG,sCAAAC,EAAA,sECTR,IAAIC,SAAQ,SAACnB,EAASoB,GAE3BC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAJ,EAAA,0DAE1BG,OAAOE,SAFmB,wBAGtBhB,EAAO,IAAIiB,IAAKH,OAAOE,UAHD,kBAMpBF,OAAOE,SAASE,SANI,OAQ1BzB,EAAQO,GARkB,gDAU1Ba,EAAO,EAAD,IAVoB,gCAcrBC,OAAOd,MAERA,EAAOc,OAAOd,KACpBmB,QAAQC,IAAI,2BACZ3B,EAAQO,KAIFqB,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIvB,EAAO,IAAIiB,IAAKI,GACtBF,QAAQC,IAAI,gDACZ3B,EAAQO,IA3BoB,6DDOnB,cACLA,EADK,gBAEYA,EAAKwB,IAAIC,cAFrB,cAELvB,EAFK,gBAGaF,EAAKwB,IAAIE,IAAIC,QAH1B,cAGLC,EAHK,OAILC,EAAkBC,EAAOC,SAASH,GAClCxB,EAAW,IAAIJ,EAAKwB,IAAIQ,SAC5BF,EAAOG,IACPJ,GAAmBA,EAAgBK,SAP1B,UASS9B,EAAS+B,QAC1B7B,QACA8B,OAXQ,QASL9B,EATK,OAaXL,EAAQD,GACRG,EAAYD,GACZG,EAAYD,GACZG,EAASD,GAhBE,4CAAH,qDAkBV+B,GACAvB,OAAOE,SAASsB,GAAG,mBAAmB,SAAApC,GACpCC,EAAYD,QAEb,IAEH,IAAMqC,EAAU,WACd,MACsB,qBAAbnC,GACY,qBAATJ,GACa,qBAAbE,GACU,qBAAVI,GArCD,SA+CEkC,IA/CF,2EA+Cb,wCAAA7B,EAAA,kEACuB8B,SADvB,SACsCrC,EAAS+B,QAC1CO,eACAN,OAHL,mBACQM,GADR,cAKQlC,EAAU,GACRmC,EAAI,EANd,YAMiBA,EAAID,GANrB,kCAOqC9B,QAAQgC,IAAI,CAC3CxC,EAAS+B,QAAQU,UAAUF,GAAGP,OAC9BhC,EAAS+B,QAAQW,MAAM5C,EAAS,GAAIyC,GAAGP,SAT7C,oCAOWW,EAPX,KAOmBC,EAPnB,KAWIxC,EAAQyC,KAAR,2BAAiBF,GAAjB,IAAyBC,cAX7B,QAMmCL,IANnC,uBAaElC,EAAWD,GAbb,6CA/Ca,kEA+Db,WAA4BnB,GAA5B,mBAAAsB,EAAA,6DACEtB,EAAE6D,iBACIC,EAAO9D,EAAE+D,OAAOC,SAAS,GAAGC,MAC5BC,EAAUlE,EAAE+D,OAAOC,SAAS,GAAGC,MAAME,MAAM,KAC3CC,EAAWpE,EAAE+D,OAAOC,SAAS,GAAGC,MAJxC,SAKQlD,EAAS+B,QACZuB,aAAaP,EAAMI,EAASE,GAC5BE,KAAK,CAACC,KAAM1D,EAAS,KAP1B,uBAQQsC,IARR,4CA/Da,kEA0Eb,WAAyBnD,GAAzB,eAAAsB,EAAA,6DACEtB,EAAE6D,iBACIW,EAASxE,EAAE+D,OAAOC,SAAS,GAAGC,MAAME,MAAM,KAFlD,SAGQpD,EAAS+B,QACZ2B,UAAUD,GACVF,KAAK,CAACC,KAAM1D,EAAS,KAL1B,4CA1Ea,kEAkFb,WAAoBb,EAAG0E,GAAvB,iBAAApD,EAAA,6DACEtB,EAAE6D,iBACIc,EAAS3E,EAAE+D,OAAOC,SAAS,GAC3BY,EAAWD,EAAOE,QAAQF,EAAOG,eAAeb,MAHxD,SAIQlD,EAAS+B,QACZiC,KAAKL,EAAUE,GACfN,KAAK,CAACC,KAAM1D,EAAS,KAN1B,uBAOQsC,IAPR,4CAlFa,sBAkGb,OAzDA9B,qBAAU,WACL6B,KACDC,MAED,CAACtC,EAAUE,EAAUJ,EAAMM,IAqDzBiC,IAKH,6BACE,sCAECrC,EAAS,GAAGmE,gBAAkB/D,EAAM+D,cACnC,oCAEI,yBAAKC,UAAU,OACf,6CACA,2CAEA,yBAAKA,UAAU,OACf,0BAAMC,SAAU,SAAAlF,GAAC,OAlHd,2CAkHkBqE,CAAarE,KAE9B,uCACA,2BAAOmF,KAAK,SAAU,6BAEtB,0CACA,2BAAOA,KAAK,SAAS,6BAGrB,+CACA,2BAAOA,KAAK,SAAS,6BAEvB,4BAAQA,KAAK,UAAb,WAIF,0BAAMD,SAAU,SAAAlF,GAAC,OAlId,2CAkIkByE,CAAUzE,KAE3B,yCACA,2BAAOmF,KAAK,SAEd,4BAAQA,KAAK,UAAb,aAMJ,KAAK,6BACL,qCAAc,6BACd,+BACE,+BACE,4BACE,kCACA,oCACA,qCACA,oCACA,yCAGJ,+BACGhE,EAAQiE,KAAI,SAAA1B,GAAM,OACjB,wBAAI2B,IAAK3B,EAAOnD,IACd,4BAAKmD,EAAOnD,IACZ,4BAAKmD,EAAOI,MACZ,4BACE,4BACCJ,EAAOQ,QAAQkB,KAAI,SAAAE,GAAM,OACxB,wBAAID,IAAKC,EAAO/E,IAAhB,cACc+E,EAAO/E,GADrB,kBAEgB+E,EAAOxB,KAFvB,mBAGiBwB,EAAO7B,YAK5B,4BA7EhB,SAAoBC,GAClB,IAAM6B,GAAO,IAAIC,MAAQC,UAEzB,QADoB,IAAID,KAA4B,IAAvBpC,SAASM,EAAOgC,MAAcD,UACvCF,EAAO,GA2EVI,CAAWjC,GAAU,gBACpBA,EAAOC,SAAW,oBAClB,0BAAMuB,SAAU,SAAAlF,GAAC,OA5KxB,6CA4K4B+E,CAAK/E,EAAG0D,EAAOnD,MAClC,6BACE,yCACA,gCACGmD,EAAOQ,QAAQkB,KAAI,SAAAE,GAAM,OACxB,4BACED,IAAKC,EAAO/E,GACZ0D,MAAOqB,EAAO/E,IACb+E,EAAOxB,WAKhB,4BACEqB,KAAK,UADP,YAQN,4BACI,IAAIK,KAA4B,IAAvBpC,SAASM,EAAOgC,MAAcE,yBA/FlD,4C,OEjGXC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c7ba96e5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 334;","import React, { useEffect, useState } from 'react';\nimport Voting from './contracts/Voting.json';\nimport { getWeb3 } from './utils.js';\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [admin, setAdmin] = useState(undefined);\n  const [ballots, setBallots] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      const contract = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const admin = await contract.methods\n        .admin()\n        .call();\n\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(contract);\n      setAdmin(admin);\n    }\n    init();\n    window.ethereum.on('accountsChanged', accounts => {\n      setAccounts(accounts);\n    });\n  }, []);\n\n  const isReady = () => {\n    return (\n      typeof contract !== 'undefined' \n      && typeof web3 !== 'undefined'\n      && typeof accounts !== 'undefined'\n      && typeof admin !== 'undefined'\n    );\n  }\n\n  useEffect(() => {\n    if(isReady()) {\n      updateBallots();\n    }\n  }, [accounts, contract, web3, admin]);\n\n  async function updateBallots() {\n    const nextBallotId = parseInt(await contract.methods\n      .nextBallotId()\n      .call());\n\n    const ballots = [];\n    for(let i = 0; i < nextBallotId; i++) { \n      const [ballot, hasVoted] = await Promise.all([\n        contract.methods.getBallot(i).call(),\n        contract.methods.votes(accounts[0], i).call() \n      ]);\n      ballots.push({...ballot, hasVoted});\n    }\n    setBallots(ballots);\n  }\n\n  async function createBallot(e) {\n    e.preventDefault();\n    const name = e.target.elements[0].value;\n    const choices = e.target.elements[1].value.split(',');\n    const duration = e.target.elements[2].value;\n    await contract.methods\n      .createBallot(name, choices, duration)\n      .send({from: accounts[0]});\n    await updateBallots();\n  };\n\n  async function addVoters(e) {\n    e.preventDefault();\n    const voters = e.target.elements[0].value.split(',');\n    await contract.methods\n      .addVoters(voters)\n      .send({from: accounts[0]});\n  };\n\n  async function vote(e, ballotId) {\n    e.preventDefault();\n    const select = e.target.elements[0];\n    const choiceId = select.options[select.selectedIndex].value;\n    await contract.methods\n      .vote(ballotId, choiceId)\n      .send({from: accounts[0]});\n    await updateBallots();\n  };\n\n  function isFinished(ballot) {\n    const now = (new Date()).getTime();\n    const ballotEnd =  (new Date(parseInt(ballot.end) * 1000)).getTime();\n    return (ballotEnd - now) > 0 ? false : true;\n  }\n\n  if (!isReady()) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Voting</h1>\n\n      {accounts[0].toLowerCase() === admin.toLowerCase() ? (\n        <>\n        \n            <div className='pos'>\n            <h2>Create ballot</h2>\n            <h2>Add Voters</h2>\n            </div>\n            <div className='pos'>\n            <form onSubmit={e => createBallot(e)}>\n            \n                <label>Name</label>\n                <input type=\"text\"  /><br/>\n              \n                <label>Choices</label>\n                <input type=\"text\" /><br/>\n             \n              \n                <label>Duration (s)</label>\n                <input type=\"text\" /><br/>\n              \n              <button type=\"submit\">Submit</button>\n            </form>\n           \n            \n            <form onSubmit={e => addVoters(e)}>\n              \n                <label>Voters</label>\n                <input type=\"text\" />\n              \n              <button type=\"submit\">Submit</button>\n            </form>\n          \n\n       </div>\n        </>\n      ) : null}<br/>\n          <h2>Votes</h2><br/>\n          <table>\n            <thead>\n              <tr>\n                <th>Id</th>\n                <th>Name</th>\n                <th>Votes</th>\n                <th>Vote</th>\n                <th>Ends on</th>\n              </tr>\n            </thead>\n            <tbody>\n              {ballots.map(ballot => (\n                <tr key={ballot.id}>\n                  <td>{ballot.id}</td>\n                  <td>{ballot.name}</td>\n                  <td>\n                    <ul>\n                    {ballot.choices.map(choice => (\n                      <li key={choice.id}>\n                        choice id: {choice.id}, \n                        choice name: {choice.name}, \n                        choice votes: {choice.votes}\n                      </li>\n                    ))}\n                    </ul>\n                  </td>\n                  <td>\n                    {isFinished(ballot) ? 'Vote finished' : (\n                      ballot.hasVoted ? 'You already voted' : ( \n                      <form onSubmit={e => vote(e, ballot.id)}>\n                        <div>\n                          <label>Choice</label>\n                          <select>\n                            {ballot.choices.map(choice => (\n                              <option \n                                key={choice.id} \n                                value={choice.id}>\n                                {choice.name}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <button \n                          type=\"submit\" \n                         >\n                          Submit\n                        </button>\n                      </form>\n                    ))}\n                  </td>\n                  <td>\n                    {(new Date(parseInt(ballot.end) * 1000)).toLocaleString()}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n    </div>\n  );\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nexport { getWeb3 };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './app.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}